# Problems or need more help?
# 1) www.vulnscan.org/UnrealIrcd/unreal32docs.html
# 2) www.vulnscan.org/UnrealIrcd/faq/ <- contains 80% of your questions!
# 3) If you still have problems you can go irc.ircsystems.net #unreal-support,
#    note that we require you to READ THE DOCUMENTATION and FAQ first!
#
#
# NOTE:  All lines, except the opening { line, end in an ;, including the
# closing } line. The IRCd will ignore commented lines.
#
# PLEASE READ doc/unreal32docs.html! The online version is also available at:
# www.vulnscan.org/UnrealIrcd/unreal32docs.html
# It contains a lot information about the configfile: gives information about
# every block, variable, etc..

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#configurationfileexplained 

###############################################################################

# 4.2 - Me Block REQUIRED (Previously known as the M:Line)

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#meblock
#
# NEW: me {}
# OLD: M:Line
# me {} defines the name, description and unreal server numeric for
# this server. Syntax is as follows:
# me {
#  name "server.name";
#  info "Server Description";
#  numeric (server numeric*);
# };
# If linking, this numeric may not be used by any other server on the network.

include "settings/me/me.conf";

###############################################################################

# 4.3 - Admin Block REQUIRED (Previously known as the A:Line)

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#meblock
#
# NEW: admin {}
# OLD: A:Line
# Admin gives information on the server admin. you
# may put as many lines under admin { as you wish.
# Syntax is as follows:
# admin {
#   "first line";
#   "second line";
#   [etc]
# };

include "settings/admin/admin.conf";

###############################################################################

# 4.4 - Class Block REQUIRED (Previously known as the Y:Line)

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#classblock
#
# NEW: class {}
# OLD: Y:line (old was confusing)
# These define settings for classes. A class is a group setting for
# connections. Example, server connections, instead of going to a client's
# class, you direct it to the server class. Syntax is as follows
# class (class name)
# {
#     pingfreq (how often to ping a user/server in seconds);
#     maxclients (how many connections for this class);
#     sendq (maximum send queue from a connection);
#     recvq (maximum receive queue from a connection [flood control]);
#  };

include "settings/classes/clients.conf";
include "settings/classes/servers.conf";

###############################################################################

# 4.5 - Allow Block REQUIRED (Previously known as the I:Line)
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#allowblock
#
# NEW: allow {}
# OLD: I:Line
# This defines allowing of connections...
# Basically for clients, it allows them to connect so you can have some
# control and/or set a password.
# Syntax is as follows:
# allow {
#       ip <user@ip-connection-mask>;
#       hostname <user@host-connection-mask>;
#       class <connection-class>;
#       password <connection-password> { <auth-type>; };
#       maxperip <max-connections-per-ip>;
#       redirect-server <server-to-forward-to>;
#       redirect-port <port-to-forward-to>;
#       options {
#                <option>;
#               <option>;
#               ...
#       };
#  };
#
#
# Note: Rules Must be most specific to least specific.
# If you wish to allow everyone to connect with 'maxperip 1'
# and a specified range with more than 'maxperip 1', then
# *@* must be frist
# note: adding 'NOBODY' will allow  to specify access/per ip
#
# #include "settings/clients/general.conf";
#
# The following order is very important to make rules work
# based on priority parameters. The first to be added
# prevails over the next one.

#include "settings/clients/6667.conf";
include "settings/clients/6697.conf";

###############################################################################

# 4.6 - Listen Block REQUIRED (Previously known as the P:Line)
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#listenblock
#
# NEW: listen {}
# OLD: P:Line
# This defines a port for the ircd to bind to, to
# allow users/servers to connect to the server.
# Syntax is as follows:
# listen (ip number):(port number)
# {
#   options {
#     (options here);
#   };
# };
# or for a plain
# listen: listen (ip):(port);
#
# NOTICE: for ipv6 ips (3ffe:b80:2:51d::2 etc), use listen [ip]:port;
#
# That works also.
#
# Options for listen:
#       OLD     |       NEW
#       S               serversonly
#       C               clientsonly
#       J               java
#       s               ssl
#                       standard
#
# NOTE ON SSL PORTS: SSL ports are pretty non-standardized,
# besides numerous high-SSL ports, some people say you should run
# it at 994 because that's the official SSL port.. but that
# requires root! Besides, port 194 is the official irc port and
# have you ever seen an ircd running on that?
# So, our suggestion is to use port 6697 for SSL, this is used by
# quite some networks and is recognized by for example StunTour.
# You are free to open up as many SSL ports as you want, but
# by (also) using 6697 you help the world standardize a bit ;).

# NOTE: If you are on an IRCd shell with multiple IP's you are
#       likely to get 'Address already in use' errors in your log
#       and the ircd won't start. This means you MUST bind
#       to a specific IP instead of '*', so for example:
#       listen 1.2.3.4:6667;
#       Obviously, replace the IP with the IP that was assigned to you.
#
# Currently, if you have compiled with IPv6 support, and you need to put IPv4
# addresses in a special way at some places.In your listen blocks, Instead of using
# listen 192.168.0.1:6667 you need to use
# listen [::ffff:192.168.0.1]:6667

include "settings/listen/services.conf";
include "settings/listen/servers-ssl.conf";
include "settings/listen/clients-ssl.conf";

###############################################################################

# 4.7 - Oper Block RECOMMENDED (Previously known as the O:Line) 

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#operblock 
#
# NEW: oper {}
# OLD: O:Line
# Defines an IRC Operator
# IRC operators are there to keep sanity to the server and usually keep it
# maintained and connected to the network.
# The syntax is as follows:
# oper (login) {
#     class (class to put them in, if different from I, moves them to new
#                class);
#     from {
#        userhost (ident@host);
#        userhost (ident@host);
#     };
#     flags
#     {
#       (flags here*);
#     };
#     OR
#     flags "old type flags, like OAaRD";
# };
#
# For a list of oper flags, see doc/unreal32docs.html#operblock
# [HIGHLY recommended to read]

include "settings/opers/*.conf";

# Notes:
# you must oper up by typing: '/oper username password'.
# both username and password are case sensitive!

###############################################################################

# 4.8 - DRpass Block RECOMMENDED (Previously known as the X:Line)
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#drpassblock 
#
# NEW: drpass {}
# OLD: X:Line
# This defines the passwords for /die and /restart.
# Syntax is as follows:
# drpass {
#  restart             "(password for restarting)";
#  die                 "(password for die)";
# };

include "settings/drpass/drpass.conf";

###############################################################################

# 4.9 - Include Directive
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#includedirective
#
# That would be the statement to use if you wanted to use a separate network file.
# Separate network files are no longer required; all the network settings can be
# inserted directly into the unrealircd.conf. Or you can put an include statement
# them to load the file.

# include mynetwork.network.conf;

###############################################################################

# 4.10 - LoadModule Directive REQUIRED
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#loadmoduledirective
#
# UnrealIRCd supports modules, loading some of them is required.
# You need at least the commands module and a cloaking module.
# FOR#NIX, uncomment the following 2lines:
#
# The following order is very important to make rules work
# based on priority parameters. The first to be added
# prevails over the next one.
#
# MODULES SECTION

include "settings/modules/modules.conf";

include "settings/modules/bopm.conf";
include "settings/modules/netadmin.conf";
include "settings/modules/hideserver.conf";
include "settings/modules/nopost.conf";
include "settings/modules/antirandom.conf";
include "settings/modules/staff.conf";
include "settings/modules/ulinessl.conf";

###############################################################################

# 4.11 - Log Block RECOMMENDED
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#logblock
#
# NEW: log {} OLD: N/A Tells the ircd where and what to log(s). You can have
# as many as you wish.
#
# FLAGS: errors, kills, tkl, connects, server-connects, kline, oper
#
# Syntax:
# log "log file"
# {
#    flags
#    {
#        flag;
#        flag;
#        etc..
#    };
# };
#
# Delete the log file and start a new one when it reaches 5MB, leave 
# this out to always use the same log 

include "settings/logs/logs.conf";

###############################################################################

# 4.12 - TLD Block OPTIONAL (Previously known as the T:Line)
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#tldblock
#
# NEW: tld {}
# OLD: T:Line
# This sets a different motd and rules files
# depending on the clients hostmask.
# Syntax is as follows:
# tld {
#    mask (ident@host);
#    motd "(motd file)";
#    rules "(rules file)";
# };
#
# http://www.vulnscan.org/UnrealIRCd/unreal32docs.html#tldblock
#
# The following order is very important to make rules work
# based on priority parameters. The first to be added
# prevails over the next one.
#
#
# The following order is very important to make rules work
# based on priority parameters. The first to be added
# prevails over the next one.
#
#

include "settings/tld/general.conf";
include "settings/tld/wirelesspt.conf";

###############################################################################

# 4.13 - Ban Nick Block OPTIONAL (Previously known as the Q:Line)

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#bannickblock 
#
# NEW: ban nick {}
# OLD: Q:Line
# Bans a nickname, so it can't be used.
# Syntax is as follows:
# ban nick {
#      mask "(nick to ban)";
#      reason "(reason)";
# };

include "settings/nickban/*.conf";

###############################################################################

# 4.14 - Ban User Block OPTIONAL (Previously known as the K:Line)
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#banuserblock
#
# NEW: ban user {}
# OLD: K:Line
# This makes it so a user from a certain mask can't connect
# to your server.
# Syntax:
# ban user { mask (hostmask/ip number); reason "(reason)"; };

include "settings/userban/*.conf";

###############################################################################

# 4.15 - Ban IP Block OPTIONAL (Previously known as the Z:Line)

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#banipblock
#
# NEW: ban ip {}
# OLD: Z:Line
# Bans an ip from connecting to the network.
# Syntax:
# ban ip { mask (ip number/hostmask); reason "(reason)"; };

include "settings/ipban/*.conf";

###############################################################################

# 4.16 - Ban Server Block OPTIONAL (Previously known as the q:Line)
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#banserverblock
#
# NEW: ban server {}
# OLD: Server Q:Line
# Disables a server from connecting to the network.
# if the server links to a remote server, local server
# will disconnect from the network.
# Syntax is as follows:
# ban server {
#      mask "(server name)";
#      reason "(reason to give)";
# };

include "settings/serverban/*.conf";

###############################################################################
#
# 4.17 - Ban RealName Block OPTIONAL (Previously known as the n:Line)
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#banrealnameblock
#
# NEW: ban realname {}
# OLD: n:Line
# This bans a certain realname from being used.
# Syntax:
# ban realname {
#      mask "(real name)";
#      reason "(reason)";
# };

include "settings/realnameban/*.conf";

###############################################################################

# 4.18 - Ban Version Block OPTIONAL

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#banversionblock
#
# NEW: ban server {}
# OLD: Server Q:Line
# Disables a server from connecting to the network.
# if the server links to a remote server, local server
# will disconnect from the network.
# Syntax is as follows:
# ban server {
#      mask "(server name)";
#      reason "(reason to give)";
# };

include "settings/versionban/*.conf";

###############################################################################

# 4.19 - Ban Exceptions Block OPTIONAL (Previously known as the E:Line)
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#banexceptionblock
#
# NOTE FOR ALL BANS, they may be repeated for addition entries!
#
# NEW: except ban {}
# OLD: E:Line
# This makes it so you can't get banned.
# Syntax:
# except ban { mask (ident@host); };
# Repeat the except ban {} as many times
# as you want for different hosts.
#
# The following order is very important to make rules work
# based on priority parameters. The first to be added
# prevails over the next one.
#
#

include "settings/exceptban/localhost.conf";
include "settings/exceptban/lan.conf";
include "settings/exceptban/domain.conf";

###############################################################################

# 4.20 - TKL Exceptions Block OPTIONAL

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#tklexceptionblock
#
# The except tkl block allows you to specify a user@host that will override a
# tkl ban placed on a broader host. This is useful when you want an ISP banned,
# but still want specific users to be able to connect. The except::mask directive
# specifies the user@host mask of the client who will be allowed to connect.
# The except::type specifies which type of ban this should override.
# Valid types are gline, gzline, qline, gqline, and shun, which make an exception
# from Glines, Global Zlines, Qlines, Global Qlines, and shuns.
# If the type {} format is used, multiple types may be specified.
#
# except tkl {
#      mask <hostmask>;
#      type <type>;
#      type {
#              <type>;
#              <type>;
#              ...
#      };
# };
#
# The following order is very important to make rules work
# based on priority parameters. The first to be added
# prevails over the next one.

include "settings/excepttkl/localhost.conf";
include "settings/excepttkl/lan.conf";
include "settings/excepttkl/domain.conf";

###############################################################################

# 4.21 - Throttle Exceptions Block OPTIONAL
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#throttleexceptionblock
#
# The except throttle block allows you to specify an IP mask that will override the throttling system.
# This only works if you have chosen to enable throttling.
# The except::mask specifies an IP mask that will not be banned because of throttling.
#
#
#  Example
#  except throttle {
#      mask 192.168.1.*;
#  };
#
# The following order is very important to make rules work
# based on priority parameters. The first to be added
# prevails over the next one.

include "settings/throttle/localhost.conf";
include "settings/throttle/lan.conf";
include "settings/throttle/domain.conf";

###############################################################################

# 4.22 - Deny DCC Block OPTIONAL (Previously known as dccdeny.conf)

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#denydccblock
#
#
# NEW: deny dcc {}
# OLD: dccdeny.conf
# Use this to block dcc send's... stops
# viruses better.
# Syntax:
# deny dcc
# {
#   filename "file to block (ie,#exe)";
#   reason "reason";
# };

include "settings/dccrules/dccdeny.conf";

###############################################################################

# 4.23 - Deny Version Block OPTIONAL (Previously known as the V:Line)
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#denyversionblock
# 
# Deny version {
#	mask <server-name>;
#	version <version-number>;
#	flags <compile-flags>;
# };
#
#
# This block allows you to deny a server from linking based on the version of 
# Unreal it is running and what compile time options it has. The format for this 
# block is somewhat complex but isn't too hard to figure out. The deny::mask 
# directive specifies a wildcard mask of the server name this applies to. 
# The deny::version specifies the protocol number of the version this refers to.
#

include "settings/versiondeny/*.conf";

###############################################################################

# 4.24 - Deny Link Block OPTIONAL (Previously known as the D/d:Line)
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#denylinkblock
#
# NEW: deny server {}
# OLD: N/A (NEW)
# This block allows you to deny a server from linking based on the version of
# Unreal it is running and what compile time options it has
# Syntax:
# deny version {
#       mask <server-name>;
#      version <version-number>;
#      flags <compile-flags>;
# };

include "settings/serverblock/*.conf";

###############################################################################

# 4.25 - Deny Channel Block OPTIONAL (Previously known as chrestrict.conf)

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#denychannelblock 
#
# NEW: deny channel {}
# OLD: N/A (NEW)
# This blocks channels from being joined.
# Syntax:
# deny channel {
#      channel "(channel)";
#      reason "reason";
# };

include "settings/channels/deny-channel.conf";

################################################################################

# 4.26 - Allow Channel Block OPTIONAL

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#allowchannelblock
#
# NEW: allow channel {}
# OLD: chrestrict
# Allows a user to join a channel...
# like an except from deny channel.
# Syntax:
# allow channel {
#   channel "channel name";
# };

include "settings/channels/allow-channel.conf";

###############################################################################

# 4.27 - Allow DCC Block OPTIONAL

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#allowdccblock
#
# The allow dcc blocks allows you to specify exceptions over deny dcc blocks,
#  wildcards are permitted. If allow dcc::soft is set to 'yes' it applies to 
# 'soft dcc bans' list, if set to 'no' it applies to the normal ('hard') dcc bans
# 
# allow dcc {
# 	filename "*.jpg";  # Images are usually safe #
# 	soft yes;
#	};

include "settings/dccrules/dccallow.conf";

###############################################################################

# 4.28 - Vhost Block OPTIONAL (Previously known as vhosts.conf)
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#vhostblock
#
# NEW: vhost {}
# OLD: Vhost.conf file
# This sets a fake ip for non-opers, or
# opers too lazy to /sethost :P
# Syntax:
#   vhost {
#       vhost (vhost.com);
#       from {
#            userhost (ident@host to allow to use it);
#       };
#       login (login name);
#       password (password);
#   };
#        then to use this vhost, do /vhost (login) (password) in IRC

include "settings/vhost/vhost.conf";

###############################################################################

# 4.29 - Badword Block OPTIONAL (Previously known as badwords.*.conf)

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#badwordsblock
#
# You can also include other configuration files.
# help.conf contains all the /helpop text. The badwords.*.conf
# files contain all the badword entries for mode +G...
# spamfilter.conf contains some good rules for current trojans.
# You probably want to include them:
#

# BADWORDS

include "settings/badwords/*.conf";

###############################################################################

# 4.30 - ULines Block OPTIONAL (Previously known as the U:Line)

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#ulinesblock
#
# NEW: ulines {}
# OLD: U:Line
# U-lines give servers more power/commands, this should ONLY be set
# for services/stats servers and NEVER for normal UnrealIRCd servers!
# Syntax is as follows:
# ulines {
#      (server to uline);
#      (server to uline);
#  [etc]
# };

include "settings/ulines/ulines.conf";

###############################################################################

# 4.31 - Link Block OPTIONAL (Previously known as C/N/H:Lines)

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#linkblock
#
# NEW: link {}
# OLD: C/N:Lines
# This defines an okay for a server connection.
# NOTE: BOTH SERVERS NEED A LINK {} SETTING TO CONNECT PROPERLY!
# Syntax is as follows:
# link (server name)
# {
#      username        (username,# works too);
#      hostname        (ip number/hostmask);
#      bind-ip         (What IP to bind to when connecting, or#);
#      port            (port to connect to, if any);
#      hub (If this is a hub,# works, or servermasks it may bring in);
#      [or leaf#;]
#      password-connect "(pass to send)";
#      password-receive "(pass we should receive)";
#      class           (class todirect servers into);
#      options {
#              (options here*);
#      };
#       # If we use SSL, we can choose what cipher to use in SSL mode
#      # Retrieve a list by "openssl ciphers", seperate ciphers with :'s
#      #
#      ciphers "DES-CBC3-MD5";
#
# };
#
#
#
#      options:
#      OLD     |       NEW
#      S               ssl
#      Z               zip
#      N/A             autoconnect
#      N/A             quarantine
#      N/A             nodnscache
#
# services, leafs and hubs

include "settings/links/*.conf";

###############################################################################

# 4.32 - Alias Block OPTIONAL
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#aliasblock
#
# NEW: alias {}
# OLD: N/A
# This allows you to set command aliases such as /nickserv, /chanserv etc
# FLAGS: services, stats, normal
#
# Syntax:
# alias "name" {
#      target "points to";
#      type aliastype;
# };
#
# [NOTE: You could also include a pre-defined alias file here, see doc/unreal32docs.html section 2.9]
#
# This points the command /nickserv to the user NickServ who is connected to the set::services-server server
#
# alias NickServ {
#       target "NickServ";
#       type services;
#	};
#
# The following order is very important to make rules work
# based on priority parameters. The first to be added
# prevails over the next one.
#
#
# The following order is very important to make rules work
# based on priority parameters. The first to be added
# prevails over the next one.

include "settings/aliases/anope.conf";

#include "settings/aliases/aliases.conf";
#include "settings/aliases/operstats.conf";
#include "settings/aliases/genericstats.conf";
#include "settings/aliases/generic.conf";
#include "settings/aliases/auspice.conf";
#include "settings/aliases/cygnus.conf";
#include "settings/aliases/epona.conf";
#include "settings/aliases/ircservices.conf";

###############################################################################

# 4.33 - Help Block OPTIONAL

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#helpblock
#
# (Note: normally you just include help.conf)
# The help block allows you to create entries for use in /helpop. The help:: 
# is the value that must be passed to /helpop as a parameter, if the help:: is 
# left out, then it will be used when no parameter is passed to /helpop. 
# The entries for the help block are the text that will be displayed to the 
# user when requesting the /helpop.

include "settings/help/help.conf";
 
###############################################################################

# 4.34 - Official Channels Block OPTIONAL

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#officialchannels
#
# Official channels are shown in /list even if no users are in the channel. 
# The topic is optional and is only shown in /list if it has 0 users.
# Example:
#
# official-channels {
#      "#Help" { topic "The official help channel, if nobody is present type /helpop helpme"; };
#	"#Home";
#	"#Main" { topic "The main channel"; };
#      };

include "settings/channels/official.conf";

###############################################################################

# 4.35 - Spamfilter Block OPTIONAL
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#spamfilter

# The spamfilter block allows you to add local spamfilters (not network-wide).
# See Features - Spamfilter for more information about spamfilters.
#
#       spamfilter {
#       regex "Come watch me on my webcam";
#       target { private; channel; };
#       action gline;
#       reason "You are infected, please go to www.antivirus.xx/blah/virus=GrrTrojan";
#       ban-time 6h;
# };
#

include "settings/spam/spamfilter.conf";

###############################################################################

# 4.36 - Cgiirc Block OPTIONAL 

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#cgiirc
#
# The cgiirc block allows you to configure host spoofing for CGI:IRC 
# gateways you trust. 
# More info @ http://www.vulnscan.org/UnrealIRCd/unreal32docs.html#feature_cgiirc
# 
# cgiirc {
#	type <webirc|old>;
#	username <mask>;  # optional #
# 	hostname <mask>;
#	password <password>;  # only for type webirc #
# };

# include "settings/cgiirc/cgiirc.conf;"

###############################################################################

# 4.37 - Set Block REQUIRED (Previously known as unrealircd.conf/networks file)
 
# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#setblock
#
# Server SET BLOCK specific configuration #
# You can include other configuration files #
# include "klines.conf"; #
# Network configuration #

include "settings/network/*.conf";

##############################################################################

# 4.38 - Files Block OPTIONAL

# http://www.vulnscan.org/UnrealIrcd/unreal32docs.html#filesblock
#
# You don't need to use a TLD block to specify default locations for your MOTDs and rules files. 
# This block controls default settings for those in addition to the pidfile and irc.tune file. 
# Anything not specified here will default to the value documented in Additional Files.
# Relative pathnames will be interpreted relative to UnrealIRCd's root directory which is normally the 
# directory containing unrealircd.conf. This block may be used to facilitate running more than one IRCd 
# out of the same directory/root. 
# In that case, you should at least specify multiple pidfiles and tunefiles—one for each server.
#
# Syntax:
#
# files {
#	motd <motd file>;
#	shortmotd <short motd file>;
#	opermotd <oper motd file>;
#	svsmotd <services motd file>;
#	botmotd <bot motd file>;
#
#	rules <rules file>;
#
#	tunefile <tune file>;
#	pidfile <pid file>;
# };
#
# Example:
#
# files {
#	motd /etc/motd;
#
#	pidfile /var/lib/run/unrealircd.pid;
# };

#include "settings/files/*.conf";

##############################################################################

# EOF;
